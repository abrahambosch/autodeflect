---
- name: Setup ats output base directory
  file:
    path: "{{ats_output}}"
    state: directory
    mode: '0755'
  tags:
    - ats 
    - setup

- name: Setup ats dnet output directories
  file:
    path: "{{ats_output}}{{item.key}}"
    state: directory
    mode: '0755'
  with_dict: "{{ dnets }}"
  tags:
    - ats 
    - setup

- name: Setup TLS upload output directory
  file:
    path: "{{tls_home}}/output/{{item.key}}"
    state: directory
    mode: '0755'
    recurse: yes
  with_dict: "{{ dnets }}"
  tags:
    - ats
    - setup
    - tls

- name: Logging disabling
  template:
    src: logging.config.j2
    dest: "{{ats_output}}/{{item.key}}/logging.config"
  with_dict: "{{ dnets }}"
  tags:
    - ats
    - ats_logging

- name: remap config
  template:
    src: remap.config.j2
    dest: "{{ats_output}}/{{item.key}}/remap.config"
  with_dict: "{{ dnets }}"
  tags:
    - ats
    - ats_remap

- name: cache.config 
  template:
    src: cache.config.j2
    dest: "{{ats_output}}/{{item.key}}/cache.config"
  with_dict: "{{ dnets }}"
  tags: 
    - ats
    - ats_cache

- name: hosts.origin
  template:
    src: hosts.origin.j2
    dest: "{{ats_output}}/{{item.key}}/hosts.origin"
  with_dict: "{{ dnets }}"
  tags: 
    - ats
    - ats_hosts

- name: ssl_multicert.config
  template:
    src: ssl_multicert.config.j2
    dest: "{{ats_output}}/{{item.key}}/ssl_multicert.config"
  with_dict: "{{ dnets }}"
  tags:
    - ats
    - tls

- name: install uploaded certs
  command: scripts/tls_bundle_decrypt.sh {{item.key}} {{item.value["tls_bundle"]}} {{tls_home}} {{item.value.network}} {{tls_gpghome}}
  with_dict: "{{ remap }}"
  when: item.value["tls_bundle"] is defined
  tags:
    - ats
    - tls
  ignore_errors: yes

- name: see if there are any non-auto-letsencrypt certs and install them
  syncronize:
    src: "{{letsencrypt_output}}non-auto/{{item.key}}/"
    dest: "{{tls_home}}output/{{item.key}}"
    mode: '0644'
  with_dict: "{{ dnets }}"
  tags:
    - ats
    - tls
    - test1
  ingnore_errors: yes

- name: write current timestamp to ats directory
  copy:
    dest: "{{ats_output}}/{{item.key}}/dashboard.timestamp"
    content: "{{timestamp}}\n"
  with_dict: "{{ dnets }}"
  tags: ats

- include_tasks: banjax.yml
